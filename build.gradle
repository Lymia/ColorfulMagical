import com.github.jengelman.gradle.plugins.shadow.relocation.RelocateClassContext
import com.github.jengelman.gradle.plugins.shadow.relocation.RelocatePathContext
import com.github.jengelman.gradle.plugins.shadow.relocation.Relocator

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
	dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.4.1'
    }
}

plugins {
	id "architectury-plugin" version "3.4.151" apply false
	id 'dev.architectury.loom' version '1.4.380' apply false
	id 'org.ajoberstar.grgit' version '5.0.0'
	id 'com.github.johnrengelman.shadow' version "8.1.1"
}

allprojects {
	apply plugin: "java"
	apply plugin: 'application'
	apply plugin: 'com.github.johnrengelman.shadow'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	version = "${project.mod_version}${getVersionMetadata()}+mc${project.minecraft_version}"
	group = project.maven_group

	repositories {
		mavenCentral()
		maven {
			url "https://maven.architectury.dev/"
		}
		maven {
			url "https://cursemaven.com"
			content {
				includeGroup "curse.maven"
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
	}

	java {
		withSourcesJar()
	}

	shadowJar {
		exclude "META-INF/maven/**"
		exclude "META-INF/proguard/**"
		exclude "META-INF/LICENSE.**" // we don't want it in *this* format, even though we want it
		exclude "org/jdesktop/swingx/**/resources/**"
		exclude "org/jdesktop/swingx/**/*.gif"
		exclude "org/jdesktop/swingx/**/*.png"
		exclude "**/*.gwt.xml"

		([
		        "com.github.tommyettinger.",
		        "com.jhlabs.",
				"org.jdesktop.",
				"org.checkerframework.",
		]).each {
			relocate("${it}", "${project.shadow_prefix}.${it}")
		}
	}

	task('proguard', type: proguard.gradle.ProGuardTask) {
		dependsOn(shadowJar)

		verbose

		injars shadowJar.archiveFile
		outjars shadowJar.archiveFile.map {
			def name = it.getAsFile().getName().replace("-all.jar", "-proguard.jar")
			project.layout.buildDirectory.file("libs/${name}")
		}

		// JVM library jars
		if (System.getProperty('java.version').startsWith('1.')) {
			libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
		} else {
			libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod"
			libraryjars "${System.getProperty('java.home')}/jmods/java.datatransfer.jmod"
			libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod"
			libraryjars "${System.getProperty('java.home')}/jmods/java.logging.jmod"
			libraryjars "${System.getProperty('java.home')}/jmods/java.naming.jmod"
			libraryjars "${System.getProperty('java.home')}/jmods/java.prefs.jmod"
			libraryjars "${System.getProperty('java.home')}/jmods/java.sql.jmod"
		}

		// Dependency configuration
		libraryjars(sourceSets.main.runtimeClasspath)
		dontwarn 'scala.**'

		// Obfuscation configuration
		keep 'class moe.lymia.**'
		keepattributes '*Annotation*'
	    keepattributes 'SourceFile,LineNumberTable'
		dontobfuscate()

		// Optimization configuration
		optimizationpasses 5
		optimizations "!code/simplification/string"
	}
}

def getVersionMetadata() {
	// CI builds only
	if (grgit != null) {
		def head = grgit.head()

		if (grgit.tag.list().findAll { it.commit == head}.isEmpty()) {
			def id = head.abbreviatedId
			if (!grgit.status().clean) {
				id += ".dirty"
			}
			return "-r${id}"
		} else {
			return ""
		}
	}

	// No tracking information could be found about the build
	return "-unknown"
}